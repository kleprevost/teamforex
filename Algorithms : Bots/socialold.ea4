<?xml version="1.0" encoding="utf-8"?>
<canvas>
    <settings>
        <object type="wxSFCanvasSettings">
            <property name="id" type="long">-1</property>
            <property name="scale" type="double">1.000000</property>
            <property name="style" type="long">1023</property>
            <property name="accepted_shapes" type="arraystring">
                <item>All</item>
            </property>
        </object>
    </settings>
    <chart>
        <object type="RLogicShape">
            <property name="id" type="long">1</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">570.000000,30.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">143.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">On Every New Bar</property>
            <property name="string" type="string">block.name=On Every New Bar
block.id=OnEveryNewBar
block.desc=Executes connected blocks on every new bar (not every tick). Detects digits used by broker or allows you to setup 5-digit broker support. Use "Clear All Objects" to clear the chart after Expert Advisor has been removed from the chart.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=onevent
block.1.prebody=if (~ClearAllObjects~) ObjectsDeleteAll();      // clear the chart
block.1.body=if (~DetectBrokerDigits~ == false &amp;&amp; ~FiveDigitBroker~) PipValue = 10;
block.2.body=if (~DetectBrokerDigits~ &amp;&amp; (NDigits == 3 || NDigits == 5)) PipValue = 10;
block.3.body=if (~BarTime~ &lt; Time[0])
block.4.body={
block.5.body=    // we have a new bar opened
block.6.body=    ~BarTime~ = Time[0]; // keep the new bar open time
block.7.body=    ~next~
block.8.body=}
block.1.postbody=if (~ClearAllObjects~) ObjectsDeleteAll();
param.1.name=5-digit Broker
param.1.id=FiveDigitBroker
param.1.type=bool
param.1.scope=fixed
param.1.value=true
param.1.hidden=0
param.1.category=
param.1.accvalue.list=false,true
param.2.name=BarTime
param.2.id=BarTime
param.2.type=datetime
param.2.scope=global
param.2.value=0
param.2.hidden=1
param.2.category=
param.2.accvalue.list=
param.3.name=Detect Broker Digits
param.3.id=DetectBrokerDigits
param.3.type=bool
param.3.scope=fixed
param.3.value=true
param.3.hidden=0
param.3.category=
param.3.accvalue.list=false,true
param.4.name=Clear All Objects
param.4.id=ClearAllObjects
param.4.type=bool
param.4.scope=fixed
param.4.value=false
param.4.hidden=0
param.4.category=
param.4.accvalue.list=false,true
</property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">2</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">480.000000,190.000000</property>
            <property name="source" type="long">1</property>
            <property name="target" type="long">15</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">3</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">670.000000,330.000000</property>
            <property name="source" type="long">34</property>
            <property name="target" type="long">39</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">4</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">670.000000,330.000000</property>
            <property name="source" type="long">37</property>
            <property name="target" type="long">33</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">5</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">680.000000,320.000000</property>
            <property name="source" type="long">39</property>
            <property name="target" type="long">31</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">6</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">680.000000,320.000000</property>
            <property name="source" type="long">33</property>
            <property name="target" type="long">32</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">8</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">560.000000,330.000000</property>
            <property name="source" type="long">36</property>
            <property name="target" type="long">9</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">10</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">670.000000,330.000000</property>
            <property name="source" type="long">25</property>
            <property name="target" type="long">34</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">11</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">670.000000,330.000000</property>
            <property name="source" type="long">38</property>
            <property name="target" type="long">37</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">12</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">560.000000,330.000000</property>
            <property name="source" type="long">24</property>
            <property name="target" type="long">7</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">13</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">350.000000,190.000000</property>
            <property name="source" type="long">16</property>
            <property name="target" type="long">17</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">14</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">480.000000,230.000000</property>
            <property name="source" type="long">17</property>
            <property name="target" type="long">35</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">15</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">590.000000,80.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">96.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Data Import</property>
            <property name="string" type="string">block.name=Data Import
block.id=CustomCode
block.desc=Allows you to enter your own custom MQL source code into final generated Expert Advisor or Script. Generator will provide function name and { } brakets with your code inside those brakets. Enter all variables via Variables property. Variables will appear next to other global variables in the output source code.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=custom
block.1.prebody=~InitCode~
block.1.body=~SourceCode~
block.2.body=~next~
block.1.postbody=~DeInitCode~
param.1.name=Source Code
param.1.id=SourceCode
param.1.type=string
param.1.scope=fixed_custom
param.1.value=\n\n\n\n    string rs_text[];\n\n    string gs_row1;\n\n    string gs_row0;\n\n    string gd_row1[];\n\n    string gd_row0[];\n\n    if ( GetLog(File_name,gs_row1,gs_row0) &lt; 1 ) return(0) ;\n\n    f0_1(gd_row1,gs_row1,",");\n\n    f0_1(gd_row0,gs_row0,",");\n\n    if ( gd_row1[2] =="Buy" &amp;&amp; gd_row0[2] == "Sell") {\n\n        METHOD1 = StrToDouble(gd_row1[3]) - StrToDouble(gd_row0[3]);\n\n        METHOD2 = (1 + StrToDouble(gd_row1[3]))/(1 + StrToDouble(gd_row0[3]));\n\n    }\n\n    if ( gd_row1[2] =="Sell" &amp;&amp; gd_row0[2] == "Buy") {\n\n        METHOD1 = StrToDouble(gd_row0[3]) -StrToDouble(gd_row1[3]);\n\n        METHOD2 = (1 + StrToDouble(gd_row0[3]))/(1 +StrToDouble(gd_row1[3]));\n\n    }\n\n}\n\n\n\n\n\n\n\n\n\n// function\n\nint GetLog(string filename, string &amp;asa_1, string &amp;asa_0) {\n\n    string gs_str; string str, str1, str2;\n\n    int li_20;\n\n    int arr_size_24;\n\n    int l_file_8 = FileOpen( filename, FILE_CSV|FILE_READ,"|");\n\n    int nIndex = 0;\n\n    if (l_file_8 &gt; 0) {\n\n        while(!FileIsEnding(l_file_8)) {\n\n            str = FileReadString(l_file_8);\n\n            if ( str !="" ) {\n\n                str2 = str1;\n\n                str1 = str;\n\n                nIndex++;\n\n            }\n\n        }\n\n        asa_1  = str2;\n\n        asa_0  = str1;\n\n        FileClose(l_file_8);\n\n        return(1);\n\n    }\n\n    return(0);\n\n}\n\n\n\n// function\n\n\n\nvoid f0_1(string &amp;asa_0[], string as_4, string as_12) {\n\n    int li_20;\n\n    int arr_size_24;\n\n    ArrayResize(asa_0, 0);\n\n    while (true) {\n\n        li_20 = StringFind(as_4, as_12);\n\n        arr_size_24 = ArraySize(asa_0);\n\n        ArrayResize(asa_0, arr_size_24 + 1);\n\n        if (li_20 == -1) break;\n\n        if (li_20 &gt; 0) asa_0[arr_size_24] = StringSubstr(as_4, 0, li_20);\n\n        else asa_0[arr_size_24] = "";\n\n        as_4 = StringSubstr(as_4, li_20 + 1);\n\n    }\n\n    asa_0[arr_size_24] = as_4;\n\n\n
param.1.hidden=0
param.1.category=
param.1.accvalue.list=
param.2.name=Variables
param.2.id=Variables
param.2.type=string
param.2.scope=global_custom
param.2.value= double METHOD1;\n double METHOD2;\n double METHOD3;\n extern  string File_name = "Datas.csv";
param.2.hidden=0
param.2.category=
param.2.accvalue.list=
param.3.name=Init Code
param.3.id=InitCode
param.3.type=string
param.3.scope=fixed_custom
param.3.value=
param.3.hidden=0
param.3.category=
param.3.accvalue.list=
param.4.name=DeInit Code
param.4.id=DeInitCode
param.4.type=string
param.4.scope=fixed_custom
param.4.value=
param.4.hidden=0
param.4.category=
param.4.accvalue.list=
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">16</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">650.000000,260.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">143.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Technical Analysis</property>
            <property name="string" type="string">block.name=Technical Analysis
block.id=TechnicalAnalysis
block.desc=Allows you to compare two technical indicators or constant values. If result is TRUE other blocks connected to this block are executed. If you need to compare few sets of indicators simply chain one Technical Analysis block after the other. Example: you need to make sure fast moving average is above slow moving average and momentum indicator is above 50. Setup one Technical Analysis block to compare moving averages and join it to second Technical Analysis block where you compare momentum indicator with value 50.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=signal
block.1.body=if (~Function1~ ~Compare~ ~Function2~)
block.2.body={
block.3.body=    ~next~
block.4.body=}
param.1.name=_First Function
param.1.id=Function1
param.1.type=function
param.1.scope=verbatim
param.1.value=METHOD1
param.1.hidden=0
param.1.category=
param.1.accvalue.list=
param.2.name=Compare
param.2.id=Compare
param.2.type=string
param.2.scope=verbatim
param.2.value=&lt;
param.2.hidden=0
param.2.category=
param.2.accvalue.list=&gt;,&lt;,==,&gt;=,&lt;=,!=
param.3.name=Second Function
param.3.id=Function2
param.3.type=function
param.3.scope=verbatim
param.3.value=-50
param.3.hidden=0
param.3.category=
param.3.accvalue.list=
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">17</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">650.000000,320.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">143.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Technical Analysis</property>
            <property name="string" type="string">block.name=Technical Analysis
block.id=TechnicalAnalysis
block.desc=Allows you to compare two technical indicators or constant values. If result is TRUE other blocks connected to this block are executed. If you need to compare few sets of indicators simply chain one Technical Analysis block after the other. Example: you need to make sure fast moving average is above slow moving average and momentum indicator is above 50. Setup one Technical Analysis block to compare moving averages and join it to second Technical Analysis block where you compare momentum indicator with value 50.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=signal
block.1.body=if (~Function1~ ~Compare~ ~Function2~)
block.2.body={
block.3.body=    ~next~
block.4.body=}
param.1.name=_First Function
param.1.id=Function1
param.1.type=function
param.1.scope=verbatim
param.1.value=METHOD2
param.1.hidden=0
param.1.category=
param.1.accvalue.list=
param.2.name=Compare
param.2.id=Compare
param.2.type=string
param.2.scope=verbatim
param.2.value=&lt;
param.2.hidden=0
param.2.category=
param.2.accvalue.list=&gt;,&lt;,==,&gt;=,&lt;=,!=
param.3.name=Second Function
param.3.id=Function2
param.3.type=function
param.3.scope=verbatim
param.3.value=0.6
param.3.hidden=0
param.3.category=
param.3.accvalue.list=
</property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">18</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">670.000000,330.000000</property>
            <property name="source" type="long">17</property>
            <property name="target" type="long">38</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">19</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">670.000000,330.000000</property>
            <property name="source" type="long">17</property>
            <property name="target" type="long">36</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">20</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">670.000000,330.000000</property>
            <property name="source" type="long">23</property>
            <property name="target" type="long">25</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">21</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">670.000000,330.000000</property>
            <property name="source" type="long">23</property>
            <property name="target" type="long">24</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">22</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">360.000000,320.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">95.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Print to Log</property>
            <property name="string" type="string">block.name=Print to Log
block.id=PrintToLog
block.desc=Produces record in the "Experts" tab on the terminal. Useful to debug and see how EA setup works. Mostly used in semi-automated trading or in development scenarios when EA and trader work together.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=utility
block.1.body=Print("~message~");
block.2.body=~next~
param.1.name=Message
param.1.id=message
param.1.type=string
param.1.scope=fixed
param.1.value=Social Data Met
param.1.hidden=0
param.1.category=
param.1.accvalue.list=
</property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">26</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">360.000000,200.000000</property>
            <property name="source" type="long">15</property>
            <property name="target" type="long">29</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_offset" type="realpoint">0.267857,0.303030</property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">27</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">480.000000,230.000000</property>
            <property name="source" type="long">23</property>
            <property name="target" type="long">22</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">28</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">350.000000,190.000000</property>
            <property name="source" type="long">30</property>
            <property name="target" type="long">23</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">29</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">590.000000,140.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">95.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Print to Log</property>
            <property name="string" type="string">block.name=Print to Log
block.id=CustomCode
block.desc=Allows you to enter your own custom MQL source code into final generated Expert Advisor or Script. Generator will provide function name and { } brakets with your code inside those brakets. Enter all variables via Variables property. Variables will appear next to other global variables in the output source code.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=custom
block.1.prebody=~InitCode~
block.1.body=~SourceCode~
block.2.body=~next~
block.1.postbody=~DeInitCode~
param.1.name=Source Code
param.1.id=SourceCode
param.1.type=string
param.1.scope=fixed_custom
param.1.value=Print(METHOD1);\nPrint(METHOD2);
param.1.hidden=0
param.1.category=
param.1.accvalue.list=
param.2.name=Variables
param.2.id=Variables
param.2.type=string
param.2.scope=global_custom
param.2.value=
param.2.hidden=0
param.2.category=
param.2.accvalue.list=
param.3.name=Init Code
param.3.id=InitCode
param.3.type=string
param.3.scope=fixed_custom
param.3.value=
param.3.hidden=0
param.3.category=
param.3.accvalue.list=
param.4.name=DeInit Code
param.4.id=DeInitCode
param.4.type=string
param.4.scope=fixed_custom
param.4.value=
param.4.hidden=0
param.4.category=
param.4.accvalue.list=
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">31</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">490.000000,574.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">95.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Print to Log</property>
            <property name="string" type="string">block.name=Print to Log
block.id=PrintToLog
block.desc=Produces record in the "Experts" tab on the terminal. Useful to debug and see how EA setup works. Mostly used in semi-automated trading or in development scenarios when EA and trader work together.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=utility
block.1.body=Print("~message~");
block.2.body=~next~
param.1.name=Message
param.1.id=message
param.1.type=string
param.1.scope=fixed
param.1.value=Trade Initiated
param.1.hidden=0
param.1.category=
param.1.accvalue.list=
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">35</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">820.000000,320.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">95.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Print to Log</property>
            <property name="string" type="string">block.name=Print to Log
block.id=PrintToLog
block.desc=Produces record in the "Experts" tab on the terminal. Useful to debug and see how EA setup works. Mostly used in semi-automated trading or in development scenarios when EA and trader work together.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=utility
block.1.body=Print("~message~");
block.2.body=~next~
param.1.name=Message
param.1.id=message
param.1.type=string
param.1.scope=fixed
param.1.value=Social Data Met
param.1.hidden=0
param.1.category=
param.1.accvalue.list=
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">37</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">620.000000,450.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">101.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Close Order</property>
            <property name="string" type="string">block.name=Close Order
block.id=CloseOrder
block.desc=Closes orders with specific Order Id and order type. Prints message in the log if fails.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=ordermod
block.1.body=int orderstotal = OrdersTotal();
block.2.body=int orders = 0;
block.3.body=int ordticket[90][2];
block.4.body=for (int i = 0; i &lt; orderstotal; i++)
block.5.body={
block.6.body=OrderSelect(i, SELECT_BY_POS, MODE_TRADES);
block.7.body=if (OrderType() != ~OrderType~ || OrderSymbol() != Symbol() || OrderMagicNumber() != ~OrderId~)
block.8.body={
block.9.body=    continue;
block.10.body=}
block.11.body=ordticket[orders][0] = OrderOpenTime();
block.12.body=ordticket[orders][1] = OrderTicket();
block.13.body=orders++;
block.14.body=}
block.15.body=if (orders &gt; 1)
block.16.body={
block.17.body=ArrayResize(ordticket,orders);
block.18.body=ArraySort(ordticket);
block.19.body=}
block.20.body=for (i = 0; i &lt; orders; i++)
block.21.body={
block.22.body=    if (OrderSelect(ordticket[i][1], SELECT_BY_TICKET) == true)
block.23.body=    {
block.24.body=        bool ret = OrderClose(OrderTicket(), OrderLots(), OrderClosePrice(), ~Slippage~, ~Color~);
block.25.body=        if (ret == false)
block.26.body=        Print("OrderClose() error - ", ErrorDescription(GetLastError()));
block.27.body=    }
block.28.body=}
block.29.body=~next~
param.1.name=Order Type
param.1.id=OrderType
param.1.type=int
param.1.scope=verbatim
param.1.value=OP_BUY
param.1.hidden=0
param.1.category=
param.1.accvalue.list=OP_SELL,OP_BUY
param.2.name=_Order Id
param.2.id=OrderId
param.2.type=int
param.2.scope=fixed
param.2.value=1
param.2.hidden=0
param.2.category=
param.2.accvalue.list=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60
param.3.name=Slippage (in pips)
param.3.id=Slippage
param.3.type=int
param.3.scope=fixed
param.3.value=4
param.3.hidden=0
param.3.category=
param.3.accvalue.list=
param.4.name=Color
param.4.id=Color
param.4.type=int
param.4.scope=fixed
param.4.value=Red
param.4.hidden=0
param.4.category=
param.4.accvalue.list=Green,Red,Blue,Yellow,White
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">38</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">630.000000,390.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">112.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">If Order Exists</property>
            <property name="string" type="string">block.name=If Order Exists
block.id=IfOrderExists
block.desc=Checks if order with specific Order Id and order type is open. Use this block to check for open or pending orders and attach below other blocks to work with those orders.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=ordermgm
block.1.body=bool exists = false;
block.2.body=for (int i=OrdersTotal()-1; i &gt;= 0; i--)
block.3.body=if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
block.4.body={
block.5.body=    if (OrderType() == ~OrderType~ &amp;&amp; OrderSymbol() == Symbol() &amp;&amp; OrderMagicNumber() == ~OrderId~)
block.6.body=    {
block.7.body=        exists = true;
block.8.body=    }
block.9.body=}
block.10.body=else
block.11.body={
block.12.body=    Print("OrderSelect() error - ", ErrorDescription(GetLastError()));
block.13.body=}
block.14.body=
block.15.body=if (exists)
block.16.body={
block.17.body=    ~next~
block.18.body=}
param.1.name=Order Type
param.1.id=OrderType
param.1.type=int
param.1.scope=fixed
param.1.value=OP_BUY
param.1.hidden=0
param.1.category=
param.1.accvalue.list=OP_SELL,OP_BUY,OP_SELLSTOP,OP_BUYSTOP,OP_SELLLIMIT,OP_BUYLIMIT
param.2.name=_Order Id
param.2.id=OrderId
param.2.type=int
param.2.scope=fixed
param.2.value=1
param.2.hidden=0
param.2.category=
param.2.accvalue.list=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60
</property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">40</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">560.000000,330.000000</property>
            <property name="source" type="long">29</property>
            <property name="target" type="long">30</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">41</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">560.000000,330.000000</property>
            <property name="source" type="long">29</property>
            <property name="target" type="long">16</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">32</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">670.000000,574.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">95.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Print to Log</property>
            <property name="string" type="string">block.name=Print to Log
block.id=PrintToLog
block.desc=Produces record in the "Experts" tab on the terminal. Useful to debug and see how EA setup works. Mostly used in semi-automated trading or in development scenarios when EA and trader work together.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=utility
block.1.body=Print("~message~");
block.2.body=~next~
param.1.name=Message
param.1.id=message
param.1.type=string
param.1.scope=fixed
param.1.value=Trade Initiated
param.1.hidden=0
param.1.category=
param.1.accvalue.list=
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">36</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">760.000000,390.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">112.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">If Order Exists</property>
            <property name="string" type="string">block.name=If Order Exists
block.id=IfOrderExists
block.desc=Checks if order with specific Order Id and order type is open. Use this block to check for open or pending orders and attach below other blocks to work with those orders.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=ordermgm
block.1.body=bool exists = false;
block.2.body=for (int i=OrdersTotal()-1; i &gt;= 0; i--)
block.3.body=if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
block.4.body={
block.5.body=    if (OrderType() == ~OrderType~ &amp;&amp; OrderSymbol() == Symbol() &amp;&amp; OrderMagicNumber() == ~OrderId~)
block.6.body=    {
block.7.body=        exists = true;
block.8.body=    }
block.9.body=}
block.10.body=else
block.11.body={
block.12.body=    Print("OrderSelect() error - ", ErrorDescription(GetLastError()));
block.13.body=}
block.14.body=
block.15.body=if (exists)
block.16.body={
block.17.body=    ~next~
block.18.body=}
param.1.name=Order Type
param.1.id=OrderType
param.1.type=int
param.1.scope=fixed
param.1.value=OP_SELL
param.1.hidden=0
param.1.category=
param.1.accvalue.list=OP_SELL,OP_BUY,OP_SELLSTOP,OP_BUYSTOP,OP_SELLLIMIT,OP_BUYLIMIT
param.2.name=_Order Id
param.2.id=OrderId
param.2.type=int
param.2.scope=fixed
param.2.value=1
param.2.hidden=0
param.2.category=
param.2.accvalue.list=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">30</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">490.000000,260.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">143.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Technical Analysis</property>
            <property name="string" type="string">block.name=Technical Analysis
block.id=TechnicalAnalysis
block.desc=Allows you to compare two technical indicators or constant values. If result is TRUE other blocks connected to this block are executed. If you need to compare few sets of indicators simply chain one Technical Analysis block after the other. Example: you need to make sure fast moving average is above slow moving average and momentum indicator is above 50. Setup one Technical Analysis block to compare moving averages and join it to second Technical Analysis block where you compare momentum indicator with value 50.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=signal
block.1.body=if (~Function1~ ~Compare~ ~Function2~)
block.2.body={
block.3.body=    ~next~
block.4.body=}
param.1.name=_First Function
param.1.id=Function1
param.1.type=function
param.1.scope=verbatim
param.1.value=METHOD1
param.1.hidden=0
param.1.category=
param.1.accvalue.list=
param.2.name=Compare
param.2.id=Compare
param.2.type=string
param.2.scope=verbatim
param.2.value=&gt;
param.2.hidden=0
param.2.category=
param.2.accvalue.list=&gt;,&lt;,==,&gt;=,&lt;=,!=
param.3.name=Second Function
param.3.id=Function2
param.3.type=function
param.3.scope=verbatim
param.3.value=50
param.3.hidden=0
param.3.category=
param.3.accvalue.list=
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">23</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">480.000000,320.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">143.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Technical Analysis</property>
            <property name="string" type="string">block.name=Technical Analysis
block.id=TechnicalAnalysis
block.desc=Allows you to compare two technical indicators or constant values. If result is TRUE other blocks connected to this block are executed. If you need to compare few sets of indicators simply chain one Technical Analysis block after the other. Example: you need to make sure fast moving average is above slow moving average and momentum indicator is above 50. Setup one Technical Analysis block to compare moving averages and join it to second Technical Analysis block where you compare momentum indicator with value 50.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=signal
block.1.body=if (~Function1~ ~Compare~ ~Function2~)
block.2.body={
block.3.body=    ~next~
block.4.body=}
param.1.name=_First Function
param.1.id=Function1
param.1.type=function
param.1.scope=verbatim
param.1.value=METHOD2
param.1.hidden=0
param.1.category=
param.1.accvalue.list=
param.2.name=Compare
param.2.id=Compare
param.2.type=string
param.2.scope=verbatim
param.2.value=&gt;
param.2.hidden=0
param.2.category=
param.2.accvalue.list=&gt;,&lt;,==,&gt;=,&lt;=,!=
param.3.name=Second Function
param.3.id=Function2
param.3.type=function
param.3.scope=verbatim
param.3.value=1.66
param.3.hidden=0
param.3.category=
param.3.accvalue.list=
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">24</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">240.000000,390.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">112.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">If Order Exists</property>
            <property name="string" type="string">block.name=If Order Exists
block.id=IfOrderExists
block.desc=Checks if order with specific Order Id and order type is open. Use this block to check for open or pending orders and attach below other blocks to work with those orders.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=ordermgm
block.1.body=bool exists = false;
block.2.body=for (int i=OrdersTotal()-1; i &gt;= 0; i--)
block.3.body=if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
block.4.body={
block.5.body=    if (OrderType() == ~OrderType~ &amp;&amp; OrderSymbol() == Symbol() &amp;&amp; OrderMagicNumber() == ~OrderId~)
block.6.body=    {
block.7.body=        exists = true;
block.8.body=    }
block.9.body=}
block.10.body=else
block.11.body={
block.12.body=    Print("OrderSelect() error - ", ErrorDescription(GetLastError()));
block.13.body=}
block.14.body=
block.15.body=if (exists)
block.16.body={
block.17.body=    ~next~
block.18.body=}
param.1.name=Order Type
param.1.id=OrderType
param.1.type=int
param.1.scope=fixed
param.1.value=OP_BUY
param.1.hidden=0
param.1.category=
param.1.accvalue.list=OP_SELL,OP_BUY,OP_SELLSTOP,OP_BUYSTOP,OP_SELLLIMIT,OP_BUYLIMIT
param.2.name=_Order Id
param.2.id=OrderId
param.2.type=int
param.2.scope=fixed
param.2.value=1
param.2.hidden=0
param.2.category=
param.2.accvalue.list=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">7</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">250.000000,444.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">95.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Print to Log</property>
            <property name="string" type="string">block.name=Print to Log
block.id=PrintToLog
block.desc=Produces record in the "Experts" tab on the terminal. Useful to debug and see how EA setup works. Mostly used in semi-automated trading or in development scenarios when EA and trader work together.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=utility
block.1.body=Print("~message~");
block.2.body=~next~
param.1.name=Message
param.1.id=message
param.1.type=string
param.1.scope=fixed
param.1.value=Already Long
param.1.hidden=0
param.1.category=
param.1.accvalue.list=
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">25</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">360.000000,390.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">112.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">If Order Exists</property>
            <property name="string" type="string">block.name=If Order Exists
block.id=IfOrderExists
block.desc=Checks if order with specific Order Id and order type is open. Use this block to check for open or pending orders and attach below other blocks to work with those orders.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=ordermgm
block.1.body=bool exists = false;
block.2.body=for (int i=OrdersTotal()-1; i &gt;= 0; i--)
block.3.body=if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
block.4.body={
block.5.body=    if (OrderType() == ~OrderType~ &amp;&amp; OrderSymbol() == Symbol() &amp;&amp; OrderMagicNumber() == ~OrderId~)
block.6.body=    {
block.7.body=        exists = true;
block.8.body=    }
block.9.body=}
block.10.body=else
block.11.body={
block.12.body=    Print("OrderSelect() error - ", ErrorDescription(GetLastError()));
block.13.body=}
block.14.body=
block.15.body=if (exists)
block.16.body={
block.17.body=    ~next~
block.18.body=}
param.1.name=Order Type
param.1.id=OrderType
param.1.type=int
param.1.scope=fixed
param.1.value=OP_SELL
param.1.hidden=0
param.1.category=
param.1.accvalue.list=OP_SELL,OP_BUY,OP_SELLSTOP,OP_BUYSTOP,OP_SELLLIMIT,OP_BUYLIMIT
param.2.name=_Order Id
param.2.id=OrderId
param.2.type=int
param.2.scope=fixed
param.2.value=1
param.2.hidden=0
param.2.category=
param.2.accvalue.list=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">34</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">360.000000,440.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">101.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Close Order</property>
            <property name="string" type="string">block.name=Close Order
block.id=CloseOrder
block.desc=Closes orders with specific Order Id and order type. Prints message in the log if fails.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=ordermod
block.1.body=int orderstotal = OrdersTotal();
block.2.body=int orders = 0;
block.3.body=int ordticket[90][2];
block.4.body=for (int i = 0; i &lt; orderstotal; i++)
block.5.body={
block.6.body=OrderSelect(i, SELECT_BY_POS, MODE_TRADES);
block.7.body=if (OrderType() != ~OrderType~ || OrderSymbol() != Symbol() || OrderMagicNumber() != ~OrderId~)
block.8.body={
block.9.body=    continue;
block.10.body=}
block.11.body=ordticket[orders][0] = OrderOpenTime();
block.12.body=ordticket[orders][1] = OrderTicket();
block.13.body=orders++;
block.14.body=}
block.15.body=if (orders &gt; 1)
block.16.body={
block.17.body=ArrayResize(ordticket,orders);
block.18.body=ArraySort(ordticket);
block.19.body=}
block.20.body=for (i = 0; i &lt; orders; i++)
block.21.body={
block.22.body=    if (OrderSelect(ordticket[i][1], SELECT_BY_TICKET) == true)
block.23.body=    {
block.24.body=        bool ret = OrderClose(OrderTicket(), OrderLots(), OrderClosePrice(), ~Slippage~, ~Color~);
block.25.body=        if (ret == false)
block.26.body=        Print("OrderClose() error - ", ErrorDescription(GetLastError()));
block.27.body=    }
block.28.body=}
block.29.body=~next~
param.1.name=Order Type
param.1.id=OrderType
param.1.type=int
param.1.scope=verbatim
param.1.value=OP_SELL
param.1.hidden=0
param.1.category=
param.1.accvalue.list=OP_SELL,OP_BUY
param.2.name=_Order Id
param.2.id=OrderId
param.2.type=int
param.2.scope=fixed
param.2.value=1
param.2.hidden=0
param.2.category=
param.2.accvalue.list=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60
param.3.name=Slippage (in pips)
param.3.id=Slippage
param.3.type=int
param.3.scope=fixed
param.3.value=4
param.3.hidden=0
param.3.category=
param.3.accvalue.list=
param.4.name=Color
param.4.id=Color
param.4.type=int
param.4.scope=fixed
param.4.value=Red
param.4.hidden=0
param.4.category=
param.4.accvalue.list=Green,Red,Blue,Yellow,White
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">42</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">470.000000,380.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">174.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">If Order Does Not Exist</property>
            <property name="string" type="string">block.name=If Order Does Not Exist
block.id=IfOrderDoesNotExist
block.desc=Checks if order with specific Order Id and order type is open. Use this block to check for open or pending orders and attach below other blocks to work with those orders. Example: using this block you can limit number of same orders open at the same time, check if there is already one SELL order, if it does not exist, open SELL order by attaching order opening block below this one.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=ordermgm
block.1.body=bool exists = false;
block.2.body=for (int i=OrdersTotal()-1; i &gt;= 0; i--)
block.3.body=if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
block.4.body={
block.5.body=    if (OrderType() == ~OrderType~ &amp;&amp; OrderSymbol() == Symbol() &amp;&amp; OrderMagicNumber() == ~OrderId~)
block.6.body=    {
block.7.body=        exists = true;
block.8.body=    }
block.9.body=}
block.10.body=else
block.11.body={
block.12.body=    Print("OrderSelect() error - ", ErrorDescription(GetLastError()));
block.13.body=}
block.14.body=
block.15.body=if (exists == false)
block.16.body={
block.17.body=    ~next~
block.18.body=}
param.1.name=Order Type
param.1.id=OrderType
param.1.type=int
param.1.scope=fixed
param.1.value=OP_BUY
param.1.hidden=0
param.1.category=
param.1.accvalue.list=OP_SELL,OP_BUY,OP_SELLSTOP,OP_BUYSTOP,OP_SELLLIMIT,OP_BUYLIMIT
param.2.name=_Order Id
param.2.id=OrderId
param.2.type=int
param.2.scope=fixed
param.2.value=1
param.2.hidden=0
param.2.category=
param.2.accvalue.list=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">43</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">470.000000,440.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">174.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">If Order Does Not Exist</property>
            <property name="string" type="string">block.name=If Order Does Not Exist
block.id=IfOrderDoesNotExist
block.desc=Checks if order with specific Order Id and order type is open. Use this block to check for open or pending orders and attach below other blocks to work with those orders. Example: using this block you can limit number of same orders open at the same time, check if there is already one SELL order, if it does not exist, open SELL order by attaching order opening block below this one.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=ordermgm
block.1.body=bool exists = false;
block.2.body=for (int i=OrdersTotal()-1; i &gt;= 0; i--)
block.3.body=if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
block.4.body={
block.5.body=    if (OrderType() == ~OrderType~ &amp;&amp; OrderSymbol() == Symbol() &amp;&amp; OrderMagicNumber() == ~OrderId~)
block.6.body=    {
block.7.body=        exists = true;
block.8.body=    }
block.9.body=}
block.10.body=else
block.11.body={
block.12.body=    Print("OrderSelect() error - ", ErrorDescription(GetLastError()));
block.13.body=}
block.14.body=
block.15.body=if (exists == false)
block.16.body={
block.17.body=    ~next~
block.18.body=}
param.1.name=Order Type
param.1.id=OrderType
param.1.type=int
param.1.scope=fixed
param.1.value=OP_SELL
param.1.hidden=0
param.1.category=
param.1.accvalue.list=OP_SELL,OP_BUY,OP_SELLSTOP,OP_BUYSTOP,OP_SELLLIMIT,OP_BUYLIMIT
param.2.name=_Order Id
param.2.id=OrderId
param.2.type=int
param.2.scope=fixed
param.2.value=1
param.2.hidden=0
param.2.category=
param.2.accvalue.list=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60
</property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">44</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">560.000000,330.000000</property>
            <property name="source" type="long">23</property>
            <property name="target" type="long">42</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">45</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">560.000000,330.000000</property>
            <property name="source" type="long">42</property>
            <property name="target" type="long">43</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">46</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">560.000000,330.000000</property>
            <property name="source" type="long">43</property>
            <property name="target" type="long">39</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">9</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">790.000000,454.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">95.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Print to Log</property>
            <property name="string" type="string">block.name=Print to Log
block.id=PrintToLog
block.desc=Produces record in the "Experts" tab on the terminal. Useful to debug and see how EA setup works. Mostly used in semi-automated trading or in development scenarios when EA and trader work together.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=utility
block.1.body=Print("~message~");
block.2.body=~next~
param.1.name=Message
param.1.id=message
param.1.type=string
param.1.scope=fixed
param.1.value=Already Short
param.1.hidden=0
param.1.category=
param.1.accvalue.list=
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">48</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">910.000000,450.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">174.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">If Order Does Not Exist</property>
            <property name="string" type="string">block.name=If Order Does Not Exist
block.id=IfOrderDoesNotExist
block.desc=Checks if order with specific Order Id and order type is open. Use this block to check for open or pending orders and attach below other blocks to work with those orders. Example: using this block you can limit number of same orders open at the same time, check if there is already one SELL order, if it does not exist, open SELL order by attaching order opening block below this one.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=ordermgm
block.1.body=bool exists = false;
block.2.body=for (int i=OrdersTotal()-1; i &gt;= 0; i--)
block.3.body=if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
block.4.body={
block.5.body=    if (OrderType() == ~OrderType~ &amp;&amp; OrderSymbol() == Symbol() &amp;&amp; OrderMagicNumber() == ~OrderId~)
block.6.body=    {
block.7.body=        exists = true;
block.8.body=    }
block.9.body=}
block.10.body=else
block.11.body={
block.12.body=    Print("OrderSelect() error - ", ErrorDescription(GetLastError()));
block.13.body=}
block.14.body=
block.15.body=if (exists == false)
block.16.body={
block.17.body=    ~next~
block.18.body=}
param.1.name=Order Type
param.1.id=OrderType
param.1.type=int
param.1.scope=fixed
param.1.value=OP_SELL
param.1.hidden=0
param.1.category=
param.1.accvalue.list=OP_SELL,OP_BUY,OP_SELLSTOP,OP_BUYSTOP,OP_SELLLIMIT,OP_BUYLIMIT
param.2.name=_Order Id
param.2.id=OrderId
param.2.type=int
param.2.scope=fixed
param.2.value=1
param.2.hidden=0
param.2.category=
param.2.accvalue.list=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">47</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">940.000000,360.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">174.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">If Order Does Not Exist</property>
            <property name="string" type="string">block.name=If Order Does Not Exist
block.id=IfOrderDoesNotExist
block.desc=Checks if order with specific Order Id and order type is open. Use this block to check for open or pending orders and attach below other blocks to work with those orders. Example: using this block you can limit number of same orders open at the same time, check if there is already one SELL order, if it does not exist, open SELL order by attaching order opening block below this one.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=ordermgm
block.1.body=bool exists = false;
block.2.body=for (int i=OrdersTotal()-1; i &gt;= 0; i--)
block.3.body=if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
block.4.body={
block.5.body=    if (OrderType() == ~OrderType~ &amp;&amp; OrderSymbol() == Symbol() &amp;&amp; OrderMagicNumber() == ~OrderId~)
block.6.body=    {
block.7.body=        exists = true;
block.8.body=    }
block.9.body=}
block.10.body=else
block.11.body={
block.12.body=    Print("OrderSelect() error - ", ErrorDescription(GetLastError()));
block.13.body=}
block.14.body=
block.15.body=if (exists == false)
block.16.body={
block.17.body=    ~next~
block.18.body=}
param.1.name=Order Type
param.1.id=OrderType
param.1.type=int
param.1.scope=fixed
param.1.value=OP_BUY
param.1.hidden=0
param.1.category=
param.1.accvalue.list=OP_SELL,OP_BUY,OP_SELLSTOP,OP_BUYSTOP,OP_SELLLIMIT,OP_BUYLIMIT
param.2.name=_Order Id
param.2.id=OrderId
param.2.type=int
param.2.scope=fixed
param.2.value=1
param.2.hidden=0
param.2.category=
param.2.accvalue.list=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60
</property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">49</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">560.000000,330.000000</property>
            <property name="source" type="long">17</property>
            <property name="target" type="long">47</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">50</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">560.000000,330.000000</property>
            <property name="source" type="long">47</property>
            <property name="target" type="long">48</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="wxSFLineShape">
            <property name="id" type="long">51</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>wxSFShapeBase</item>
            </property>
            <property name="relative_position" type="realpoint">560.000000,330.000000</property>
            <property name="source" type="long">48</property>
            <property name="target" type="long">33</property>
            <property name="source_arrow" type="serializabledynamic">
                <object type="wxSFCircleArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
            <property name="target_arrow" type="serializabledynamic">
                <object type="wxSFSolidArrow">
                    <property name="id" type="long">-1</property>
                </object>
            </property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">39</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">450.000000,520.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">163.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Buy Order Risk Fixed</property>
            <property name="string" type="string">block.name=Buy Order Risk Fixed
block.id=BuyOrderRiskFixed
block.desc=Opens long position (buy) based on parameters set via properties sheet. Prints error in the log if fails. Use Order Id property to identify each open order and manage them via management blocks. Use Balance Risk parameter to setup lot size based on percent of account free margin or some other formula. Formula may contain AccountEquity() instead of AccountFreeMargin(). Other formulas are also possible in Risk Balance parameter. Stoploss can not be zero. If Stoploss is set to zero calculations will fail.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=riskorder
block.1.body=double lotsize = MarketInfo(Symbol(),MODE_LOTSIZE) / AccountLeverage();
block.2.body=double pipsize = ~AccountType~ * 10;
block.3.body=double maxlots = ~RiskBalance~ / 100 * ~BalanceRiskPercent~ / lotsize * pipsize;
block.4.body=if (~BuyStoploss~ == 0) Print("OrderSend() error - stoploss can not be zero");
block.5.body=double lots = maxlots / ~BuyStoploss~ * 10;
block.6.body=
block.7.body=// calculate lot size based on current risk
block.8.body=double lotvalue = 0.001;
block.9.body=double minilot = MarketInfo(Symbol(), MODE_MINLOT);
block.10.body=int powerscount = 0;
block.11.body=while (minilot &lt; 1)
block.12.body={
block.13.body=    minilot = minilot * MathPow(10, powerscount);
block.14.body=    powerscount++;
block.15.body=}
block.16.body=lotvalue = NormalizeDouble(lots, powerscount - 1);
block.17.body=
block.18.body=if (lotvalue &lt; MarketInfo(Symbol(), MODE_MINLOT))    // make sure lot is not smaller than allowed value
block.19.body={
block.20.body=    lotvalue = MarketInfo(Symbol(), MODE_MINLOT);
block.21.body=}
block.22.body=if (lotvalue &gt; MarketInfo(Symbol(), MODE_MAXLOT))    // make sure lot is not greater than allowed value
block.23.body={
block.24.body=    lotvalue = MarketInfo(Symbol(), MODE_MAXLOT);
block.25.body=}
block.26.body=double SL = Ask - ~BuyStoploss~*PipValue*Point;
block.27.body=if (~BuyStoploss~ == 0) SL = 0;
block.28.body=double TP = Ask + ~BuyTakeprofit~*PipValue*Point;
block.29.body=if (~BuyTakeprofit~ == 0) TP = 0;
block.30.body=
block.31.body=int ticket = -1;
block.32.body=if (~ECNBroker~)
block.33.body=    ticket = OrderSend(Symbol(), OP_BUY, lotvalue, Ask, ~BuySlippage~, 0, 0, "~BuyExpertName~", ~BuyOrderId~, 0, ~BuyColor~);
block.34.body=else
block.35.body=    ticket = OrderSend(Symbol(), OP_BUY, lotvalue, Ask, ~BuySlippage~, SL, TP, "~BuyExpertName~", ~BuyOrderId~, 0, ~BuyColor~);
block.36.body=if (ticket &gt; -1)
block.37.body={
block.38.body=    if (~ECNBroker~)
block.39.body=    {
block.40.body=        OrderSelect(ticket, SELECT_BY_TICKET);
block.41.body=        bool ret = OrderModify(OrderTicket(), OrderOpenPrice(), SL, TP, 0, ~BuyColor~);
block.42.body=        if (ret == false)
block.43.body=        Print("OrderModify() error - ", ErrorDescription(GetLastError()));
block.44.body=    }
block.45.body=    ~next~
block.46.body=}
block.47.body=else
block.48.body={
block.49.body=    Print("OrderSend() error - ", ErrorDescription(GetLastError()));
block.50.body=}
param.1.name=Risk Balance
param.1.id=RiskBalance
param.1.type=string
param.1.scope=verbatim
param.1.value=AccountFreeMargin()
param.1.hidden=0
param.1.category=
param.1.accvalue.list=AccountFreeMargin(),AccountEquity(),AccountBalance()
param.2.name=Slippage (in pips)
param.2.id=BuySlippage
param.2.type=int
param.2.scope=fixed
param.2.value=4
param.2.hidden=0
param.2.category=
param.2.accvalue.list=
param.3.name=Stoploss (in pips)
param.3.id=BuyStoploss
param.3.type=int
param.3.scope=external
param.3.value=500
param.3.hidden=0
param.3.category=
param.3.accvalue.list=
param.4.name=Takeprofit (in pips)
param.4.id=BuyTakeprofit
param.4.type=int
param.4.scope=external
param.4.value=500
param.4.hidden=0
param.4.category=
param.4.accvalue.list=
param.5.name=Expert Name
param.5.id=BuyExpertName
param.5.type=string
param.5.scope=fixed
param.5.value=social
param.5.hidden=0
param.5.category=
param.5.accvalue.list=
param.6.name=_Order Id
param.6.id=BuyOrderId
param.6.type=int
param.6.scope=fixed
param.6.value=1
param.6.hidden=0
param.6.category=
param.6.accvalue.list=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40
param.7.name=Color
param.7.id=BuyColor
param.7.type=int
param.7.scope=fixed
param.7.value=Blue
param.7.hidden=0
param.7.category=
param.7.accvalue.list=Green,Red,Blue,Yellow,White
param.8.name=ECN or STP Broker
param.8.id=ECNBroker
param.8.type=bool
param.8.scope=fixed
param.8.value=true
param.8.hidden=0
param.8.category=
param.8.accvalue.list=true,false
param.9.name=Balance Risk Percent (1 to 100)
param.9.id=BalanceRiskPercent
param.9.type=double
param.9.scope=external
param.9.value=65
param.9.hidden=0
param.9.category=
param.9.accvalue.list=
param.10.name=Account Type (1-standard,10-mini,100-micro)
param.10.id=AccountType
param.10.type=double
param.10.scope=verbatim
param.10.value=1
param.10.hidden=0
param.10.category=
param.10.accvalue.list=0.01,0.1,1,10,100,1000
</property>
        </object>
        <object type="LogicShape">
            <property name="id" type="long">33</property>
            <property name="accepted_connections" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_src_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="accepted_trg_neighbours" type="arraystring">
                <item>All</item>
            </property>
            <property name="relative_position" type="realpoint">640.000000,520.000000</property>
            <property name="halign" type="long">2</property>
            <property name="valign" type="long">1</property>
            <property name="vborder" type="double">20.000000</property>
            <property name="size" type="realpoint">163.000000,33.000000</property>
            <property name="font" type="font">arial 12</property>
            <property name="text" type="string">Sell Order Risk Fixed</property>
            <property name="string" type="string">block.name=Sell Order Risk Fixed
block.id=SellOrderRiskFixed
block.desc=Opens short position (sell) based on parameters set via properties sheet. Prints error in the log if fails. Use Order Id property to identify each open order and manage them via management blocks. Use Balance Risk parameter to setup lot size based on percent of account free margin or some other formula. Formula may contain AccountEquity() instead of AccountFreeMargin(). Other formulas are also possible in Risk Balance parameter. Stoploss can not be zero. If Stoploss is set to zero calculations will fail.
block.developer=Etasoft
block.version=1.0
block.genmode=0
block.builtin=1
block.type=riskorder
block.1.body=double lotsize = MarketInfo(Symbol(),MODE_LOTSIZE) / AccountLeverage();
block.2.body=double pipsize = ~AccountType~ * 10;
block.3.body=double maxlots = ~RiskBalance~ / 100 * ~BalanceRiskPercent~ / lotsize * pipsize;
block.4.body=if (~SellStoploss~ == 0) Print("OrderSend() error - stoploss can not be zero");
block.5.body=double lots = maxlots / ~SellStoploss~ * 10;
block.6.body=
block.7.body=// calculate lot size based on current risk
block.8.body=double lotvalue = 0.001;
block.9.body=double minilot = MarketInfo(Symbol(), MODE_MINLOT);
block.10.body=int powerscount = 0;
block.11.body=while (minilot &lt; 1)
block.12.body={
block.13.body=    minilot = minilot * MathPow(10, powerscount);
block.14.body=    powerscount++;
block.15.body=}
block.16.body=lotvalue = NormalizeDouble(lots, powerscount - 1);
block.17.body=
block.18.body=if (lotvalue &lt; MarketInfo(Symbol(), MODE_MINLOT))    // make sure lot is not smaller than allowed value
block.19.body={
block.20.body=    lotvalue = MarketInfo(Symbol(), MODE_MINLOT);
block.21.body=}
block.22.body=if (lotvalue &gt; MarketInfo(Symbol(), MODE_MAXLOT))    // make sure lot is not greater than allowed value
block.23.body={
block.24.body=    lotvalue = MarketInfo(Symbol(), MODE_MAXLOT);
block.25.body=}
block.26.body=double SL = Bid + ~SellStoploss~*PipValue*Point;
block.27.body=if (~SellStoploss~ == 0) SL = 0;
block.28.body=double TP = Bid - ~SellTakeprofit~*PipValue*Point;
block.29.body=if (~SellTakeprofit~ == 0) TP = 0;
block.30.body=
block.31.body=int ticket = -1;
block.32.body=if (~ECNBroker~)
block.33.body=    ticket = OrderSend(Symbol(), OP_SELL, lotvalue, Bid, ~SellSlippage~, 0, 0, "~SellExpertName~", ~SellOrderId~, 0, ~SellColor~);
block.34.body=else
block.35.body=    ticket = OrderSend(Symbol(), OP_SELL, lotvalue, Bid, ~SellSlippage~, SL, TP, "~SellExpertName~", ~SellOrderId~, 0, ~SellColor~);
block.36.body=if (ticket &gt; -1)
block.37.body={
block.38.body=    if (~ECNBroker~)
block.39.body=    {
block.40.body=        OrderSelect(ticket, SELECT_BY_TICKET);
block.41.body=        bool ret = OrderModify(OrderTicket(), OrderOpenPrice(), SL, TP, 0, ~SellColor~);
block.42.body=        if (ret == false)
block.43.body=        Print("OrderModify() error - ", ErrorDescription(GetLastError()));
block.44.body=    }
block.45.body=    ~next~
block.46.body=}
block.47.body=else
block.48.body={
block.49.body=    Print("OrderSend() error - ", ErrorDescription(GetLastError()));
block.50.body=}
param.1.name=Risk Balance
param.1.id=RiskBalance
param.1.type=string
param.1.scope=verbatim
param.1.value=AccountFreeMargin()
param.1.hidden=0
param.1.category=
param.1.accvalue.list=AccountFreeMargin(),AccountEquity(),AccountBalance()
param.2.name=Slippage (in pips)
param.2.id=SellSlippage
param.2.type=int
param.2.scope=fixed
param.2.value=4
param.2.hidden=0
param.2.category=
param.2.accvalue.list=
param.3.name=Stoploss (in pips)
param.3.id=SellStoploss
param.3.type=int
param.3.scope=external
param.3.value=500
param.3.hidden=0
param.3.category=
param.3.accvalue.list=
param.4.name=Takeprofit (in pips)
param.4.id=SellTakeprofit
param.4.type=int
param.4.scope=external
param.4.value=500
param.4.hidden=0
param.4.category=
param.4.accvalue.list=
param.5.name=Expert Name
param.5.id=SellExpertName
param.5.type=string
param.5.scope=fixed
param.5.value=social
param.5.hidden=0
param.5.category=
param.5.accvalue.list=
param.6.name=_Order Id
param.6.id=SellOrderId
param.6.type=int
param.6.scope=fixed
param.6.value=1
param.6.hidden=0
param.6.category=
param.6.accvalue.list=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40
param.7.name=Color
param.7.id=SellColor
param.7.type=int
param.7.scope=fixed
param.7.value=Red
param.7.hidden=0
param.7.category=
param.7.accvalue.list=Green,Red,Blue,Yellow,White
param.8.name=ECN or STP Broker
param.8.id=ECNBroker
param.8.type=bool
param.8.scope=fixed
param.8.value=true
param.8.hidden=0
param.8.category=
param.8.accvalue.list=true,false
param.9.name=Balance Risk Percent (1 to 100)
param.9.id=BalanceRiskPercent
param.9.type=double
param.9.scope=external
param.9.value=65
param.9.hidden=0
param.9.category=
param.9.accvalue.list=
param.10.name=Account Type (1-standard,10-mini,100-micro)
param.10.id=AccountType
param.10.type=double
param.10.scope=verbatim
param.10.value=1
param.10.hidden=0
param.10.category=
param.10.accvalue.list=0.01,0.1,1,10,100,1000
</property>
        </object>
    </chart>
</canvas>
